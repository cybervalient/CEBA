load("H:/pers/mcc/REDA/Functions/ConfigureEDA.R")
load("H:/pers/mcc/REDA/Functions/ExecuteEDA.R")
load("H:/pers/mcc/REDA/Functions/FitnessFunction.R")
install.packages("H:/pers/mcc/cEDA.tar.gz", repos = NULL, type = "source")
install.packages("F:/pers/mcc/alg estimacion distribuciones/en r/bnlearn_4.0.tar.gz", repos = NULL, type = "source")
install.packages("F:/pers/mcc/alg estimacion distribuciones/en r/corpcor_1.6.8.tar.gz", repos = NULL, type = "source")
load("F:/pers/mcc/REDA/Main/RunCEDA.R")
setwd("H:/pers/mcc/REDA")
load("H:/pers/mcc/REDA/.RData")
View(fitness.F3Poly)
View(execute.EDA)
View(execute.EDAContinuous)
load("H:/pers/mcc/REDA/Main/RunCEDA.R")
load("H:/pers/mcc/REDA/.RData")
View(f3Poly)
f3Poly <- function(buff){
f1 = c(0,0,0);
f2 = c(0,0,1);
f3 = c(0,1,0);
f4 = c(0,1,1);
f5 = c(1,0,0);
f6 = c(1,0,1);
f7 = c(1,1,0);
if ( all.equal(buff, f1) == TRUE ){
return (-1.186);
}else if ( all.equal(buff, f2) == TRUE ){
return (1.047);
}else if ( all.equal(buff, f3) == TRUE ){
return (0.469);
}else if ( all.equal(buff, f4) == TRUE ){
return (0.096);
}else if ( all.equal(buff, f5) == TRUE ){
return (-4.391);
}else if ( all.equal(buff, f6) == TRUE ){
return (-1.122);
}else if ( all.equal(buff, f7) == TRUE ){
return (-0.083);
}else
return (0.553);
}
View(execute.EDA)
load("H:/pers/mcc/REDA/Main/RunCEDA.R")
load("H:/pers/mcc/REDA/Main/RunCEDA.R")
load("H:/pers/mcc/REDA/Main/.RData")
load("H:/pers/mcc/REDA/Functions/ExecuteEDA.R")
source("init.all.R")
init.all()
setwd("H:/pers/mcc/REDA")
load("H:/pers/mcc/REDA/.RData")
run <-
function(fitFunction = "Plateau",indsize = 120,popSize = 100,select = 30,min =
0,max = 1,elitism = 1,optimum = 40) {
newcEDA <- new("cEDA")
fitFun = new(fitFunction)
init = "Discrete"
popSize = popSize
indSize = indsize
selSize = select
elit = elitism
varMin = c(rep(min,indsize))
varMax = c(rep(max,indsize))
select = "Truncation"
learn <-
new(
"RSMAX2",maximize = 'hc',restrict = 'gs',test = 'mi-sh', score = 'bic',debug = FALSE ,optimized =
TRUE
)
samp <- "RBN"
stop <- new("Found",found = optimum,iterations = 30)
#Config the cellular EDA
lattice <-
new(
"LatticeConfiguration", totalRows = 5, totalCols = 5, totalRowsPerCell =
2,
totalColsPerCell = 2
)
neighbor = 1;
if(neighbor==0){
#one
xradio <- array(c(0))
yradio <- array(c(0))
}
else if(neighbor==1){
#l5
xradio <- array(c(0,0,0,-1,1))
yradio <- array(c(0,-1,1,0,0))
}
else if(neighbor==2){
#c13
xradio <- array(c(0,0,0,0,0,-1,-1,-2,1,2,1,-1,1))
yradio <- array(c(0,1,2,-1,-2,1,0,0,0,0,1,-1,-1))
}
else if(neighbor==3){
#c25
xradio <- array(c(0,0,0,0,0,0,0,-1,-1,-1,-2,-3,1,2,3,-2,1,-1,-1,-2,1,2,1,1,2))
yradio <- array(c(0,1,2,3,-1,-2,-3,1,2,0,0,0,0,0,0,1,1,-1,-2,-1,-1,-1,-2,2,1))
}
else if(neighbor==4){
#c41
xradio <- array(c(0,0,0,0,0,0,0,-1,-1,-1,-2,-3,1,2,3,-2,1,-1,-1,-2,1,2,1,1,2,0,0,1,1,2,2,3,3,4,-1,-1,-2,-2,-3,-3,-4))
yradio <- array(c(0,1,2,3,-1,-2,-3,1,2,0,0,0,0,0,0,1,1,-1,-2,-1,-1,-1,-2,2,1,4,-4,3,-3,2,-2,1,-1,0,3,-3,-2,2,-1,1,0))
}else if(neighbor==5){
#l9
xradio <- array(c(0,0,0,0,0,-2,-1,1,2))
yradio <- array(c(0,-1,-2,1,2,0,0,0,0))
}else if(neighbor==6){
#c9
xradio <- array(c(0,0,0,-1,-1,1,1,-1,1))
yradio <- array(c(0,1,-1,1,0,0,1,-1,-1))
}
neighborhood <- new("Neighborhood", xradio = xradio,yradio = yradio)
config(
newcEDA,fitFun,init,lattice, neighborhood,indSize,selSize,elit,varMin,varMax,select,learn,samp, stop
)
#print("run(fitFunction,indsize,popSize,select,min,max,elitism,optimum)")
}
source("init.all.R")
source("init.all.R")
init.all()
init.all()
run <-
function(fitFunction = "Plateau",indsize = 120,popSize = 100,select = 30,min =
0,max = 1,elitism = 1,optimum = 40) {
newcEDA <- new("cEDA")
fitFun = new(fitFunction)
init = "Discrete"
popSize = popSize
indSize = indsize
selSize = select
elit = elitism
varMin = c(rep(min,indsize))
varMax = c(rep(max,indsize))
select = "Truncation"
learn <-
new(
"RSMAX2",maximize = 'hc',restrict = 'gs',test = 'mi-sh', score = 'bic',debug = FALSE ,optimized =
TRUE
)
samp <- "RBN"
stop <- new("Found",found = optimum,iterations = 30)
#Config the cellular EDA
lattice <-
new(
"LatticeConfiguration", totalRows = 5, totalCols = 5, totalRowsPerCell =
2,
totalColsPerCell = 2
)
neighbor = 1;
if(neighbor==0){
#one
xradio <- array(c(0))
yradio <- array(c(0))
}
else if(neighbor==1){
#l5
xradio <- array(c(0,0,0,-1,1))
yradio <- array(c(0,-1,1,0,0))
}
else if(neighbor==2){
#c13
xradio <- array(c(0,0,0,0,0,-1,-1,-2,1,2,1,-1,1))
yradio <- array(c(0,1,2,-1,-2,1,0,0,0,0,1,-1,-1))
}
else if(neighbor==3){
#c25
xradio <- array(c(0,0,0,0,0,0,0,-1,-1,-1,-2,-3,1,2,3,-2,1,-1,-1,-2,1,2,1,1,2))
yradio <- array(c(0,1,2,3,-1,-2,-3,1,2,0,0,0,0,0,0,1,1,-1,-2,-1,-1,-1,-2,2,1))
}
else if(neighbor==4){
#c41
xradio <- array(c(0,0,0,0,0,0,0,-1,-1,-1,-2,-3,1,2,3,-2,1,-1,-1,-2,1,2,1,1,2,0,0,1,1,2,2,3,3,4,-1,-1,-2,-2,-3,-3,-4))
yradio <- array(c(0,1,2,3,-1,-2,-3,1,2,0,0,0,0,0,0,1,1,-1,-2,-1,-1,-1,-2,2,1,4,-4,3,-3,2,-2,1,-1,0,3,-3,-2,2,-1,1,0))
}else if(neighbor==5){
#l9
xradio <- array(c(0,0,0,0,0,-2,-1,1,2))
yradio <- array(c(0,-1,-2,1,2,0,0,0,0))
}else if(neighbor==6){
#c9
xradio <- array(c(0,0,0,-1,-1,1,1,-1,1))
yradio <- array(c(0,1,-1,1,0,0,1,-1,-1))
}
neighborhood <- new("Neighborhood", xradio = xradio,yradio = yradio)
config(
newcEDA,fitFun,init,lattice, neighborhood,indSize,selSize,elit,varMin,varMax,select,learn,samp, stop
)
#print("run(fitFunction,indsize,popSize,select,min,max,elitism,optimum)")
}
detach("package:bnlearn", unload=TRUE)
library("bnlearn", lib.loc="C:/Archivos de programa/R/R-3.3.1/library")
source("init.all.R")
init.all()
remove.packages("bnlearn")
install.packages("H:/pers/mcc/alg estimacion distribuciones/en r/bnlearn_3.8.1.tar.gz", repos = NULL, type = "source")
run <-
function(fitFunction = "Plateau",indsize = 120,popSize = 100,select = 30,min =
0,max = 1,elitism = 1,optimum = 40) {
newcEDA <- new("cEDA")
fitFun = new(fitFunction)
init = "Discrete"
popSize = popSize
indSize = indsize
selSize = select
elit = elitism
varMin = c(rep(min,indsize))
varMax = c(rep(max,indsize))
select = "Truncation"
learn <-
new(
"RSMAX2",maximize = 'hc',restrict = 'gs',test = 'mi-sh', score = 'bic',debug = FALSE ,optimized =
TRUE
)
samp <- "RBN"
stop <- new("Found",found = optimum,iterations = 30)
#Config the cellular EDA
lattice <-
new(
"LatticeConfiguration", totalRows = 5, totalCols = 5, totalRowsPerCell =
2,
totalColsPerCell = 2
)
neighbor = 1;
if(neighbor==0){
#one
xradio <- array(c(0))
yradio <- array(c(0))
}
else if(neighbor==1){
#l5
xradio <- array(c(0,0,0,-1,1))
yradio <- array(c(0,-1,1,0,0))
}
else if(neighbor==2){
#c13
xradio <- array(c(0,0,0,0,0,-1,-1,-2,1,2,1,-1,1))
yradio <- array(c(0,1,2,-1,-2,1,0,0,0,0,1,-1,-1))
}
else if(neighbor==3){
#c25
xradio <- array(c(0,0,0,0,0,0,0,-1,-1,-1,-2,-3,1,2,3,-2,1,-1,-1,-2,1,2,1,1,2))
yradio <- array(c(0,1,2,3,-1,-2,-3,1,2,0,0,0,0,0,0,1,1,-1,-2,-1,-1,-1,-2,2,1))
}
else if(neighbor==4){
#c41
xradio <- array(c(0,0,0,0,0,0,0,-1,-1,-1,-2,-3,1,2,3,-2,1,-1,-1,-2,1,2,1,1,2,0,0,1,1,2,2,3,3,4,-1,-1,-2,-2,-3,-3,-4))
yradio <- array(c(0,1,2,3,-1,-2,-3,1,2,0,0,0,0,0,0,1,1,-1,-2,-1,-1,-1,-2,2,1,4,-4,3,-3,2,-2,1,-1,0,3,-3,-2,2,-1,1,0))
}else if(neighbor==5){
#l9
xradio <- array(c(0,0,0,0,0,-2,-1,1,2))
yradio <- array(c(0,-1,-2,1,2,0,0,0,0))
}else if(neighbor==6){
#c9
xradio <- array(c(0,0,0,-1,-1,1,1,-1,1))
yradio <- array(c(0,1,-1,1,0,0,1,-1,-1))
}
neighborhood <- new("Neighborhood", xradio = xradio,yradio = yradio)
config(
newcEDA,fitFun,init,lattice, neighborhood,indSize,selSize,elit,varMin,varMax,select,learn,samp, stop
)
#print("run(fitFunction,indsize,popSize,select,min,max,elitism,optimum)")
}
